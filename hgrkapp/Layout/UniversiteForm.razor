@inject hgrkapp.DTO.universite univ
@inject hgrkapp.Repository.IServices.IUniversiteServices Services
<div class="col-12 grid-margin stretch-card">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">Enregistrement d'une université</h4>
            <p class="card-description">
               Formulaire université
                 <ShowAlertComponentInForms Errors="validationErrors"/>
            </p>
  
                <div class="form-group">
                    <label for="exampleInputName1">Nom de l'université</label>
                    <input type="text" class="form-control" @bind="univ.Nom" placeholder="Nom">
                </div>
                <div class="form-group">
                    <label for="exampleInputEmail3">Date de réquérance</label>
                    <input type="date" class="form-control" @bind="univ.DateRequeranc">
                </div>

                 <div class="form-group">
                     <label for="exampleInputEmail3">Adresse</label>
                     <input type="text" class="form-control" @bind="univ.Adresse" placeholder="Adresse">
                 </div>
             <button type="submit" class="btn btn-primary mr-2" @onclick="OnPostData">Soumettre</button>
             <button class="btn btn-light" @onclick="OnCancelClick">Annuler</button>
        </div>
    </div>
</div>
@code {
    private List<string> validationErrors = new List<string>();
    [Parameter]
    public EventCallback<bool> OnChangeUniversite { get; set; }

    private async void OnPostData()
    {
        validationErrors = univ.Validate();
    if (validationErrors.Count == 0)
            {
               var data = await Services.CreateUniversite(univ);
   await OnChangeUniversite.InvokeAsync(true);
            }
     
    }
    private async void OnCancelClick()
    {
        await OnChangeUniversite.InvokeAsync(true);
    }
}
