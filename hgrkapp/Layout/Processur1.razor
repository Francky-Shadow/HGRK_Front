@inject hgrkapp.DTO.groupe group
@inject hgrkapp.Repository.IServices.IGroupeServices Services
@inject hgrkapp.Repository.IServices.IUniversiteServices UniversiteService
@inject hgrkapp.Repository.IServices.IStageService StageService
@inject hgrkapp.DTO.EtudiantSimilaireInfo info
@inject hgrkapp.DTO.stage stage
<div class="col-12 grid-margin stretch-card">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title"> Formulaire de création de groupe</h4>
         
           <ShowAlertComponentInForms Errors="validationErrors"/>
            <div class="form-group">
                <label for="exampleInputName1">Label groupe</label>
                <input type="text" class="form-control" @bind="group.LabelGp" placeholder="Label">
            </div>

            <div class="form-group">
                <label for="exampleInputName1">Code du groupe</label>
                <select class="form-select"  @bind="group.Code">
                    <option value="1">--Sélectionner--</option>
                    <option value="1">Groupe 1</option>
                    <option value="2">Groupe 2</option>
                    <option value="3">Groupe 3</option>
                    <option value="4">Groupe 4</option>
                 </select>
            </div>


            <div class="form-group">
                <label>Université</label>

                <select class="form-select" @bind="group.IdUniversite">
                      <option value="">--Sélectionner--</option>
                    @foreach(var data in universites)
                    {
                        <option value="@data.Id">@data.Nom</option>
                    }
                </select>
             
            </div>

            <button type="submit" class="btn btn-primary mr-2" @onclick="OnPostData">Suivant <i class="fa fa-arrow-alt-circle-right"></i></button>

        </div>
    </div>
</div>
@code {


    private List<string> validationErrors = new List<string>();

    private List<hgrkapp.DTO.universite> universites = new List<hgrkapp.DTO.universite>();
    [Parameter]
    public EventCallback<bool> OnChangeGroup { get; set; }


    [Parameter]
    public EventCallback<bool> OnCancelGroup { get; set; }

    private async void OnCancelData()
    {
        OnCancelGroup.InvokeAsync(true);
    }

    private async void OnPostData()
    {

        validationErrors = group.Validate();
        if (validationErrors.Count == 0)
        {
            group.EtatStage = "en cours";
            var data = await Services.CreateGroupe(group);

            info.IdGroupe = data.Id;
            info.IdUniversite = data.IdUniversite;
            stage.IdUniversite = data.IdUniversite;

            var sata = await StageService.CreateStage(stage);
            info.IdStage = sata.Id;
            await OnChangeGroup.InvokeAsync(false);
        }
        else
        {

        }
    }
    protected override async Task OnInitializedAsync()
    {
        universites = await UniversiteService.GetUniversite();
        base.OnInitializedAsync();
    }
}


@code {

}
